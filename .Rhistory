interest.paid[i] <- (balance * rate/12)
principal.paid[i] <- monthly.payment - (balance * rate/12)
rem.balance <- balance[i]
i <- i + 1
df <- data.frame(rem.balance, principal.paid, interest.paid)
}
}
debt.amort <- function (principal, rate, monthly.payment) {
i <- 1
balance <- principal
rem.balance <- c()
principal.paid <- c()
interest.paid <- c()
while (balance > 0) {
balance = balance + (balance * rate/12) - monthly.payment
interest.paid[i] <- (balance * rate/12)
principal.paid[i] <- monthly.payment - (balance * rate/12)
rem.balance <- balance[i]
i <- i + 1
df <- data.frame(rem.balance, principal.paid, interest.paid)
}
}
debt.amort(30000, .07, 1000)
debt.amort <- function (principal, rate, monthly.payment) {
i <- 1
balance <- principal
rem.balance <- c()
principal.paid <- c()
interest.paid <- c()
while (balance > 0) {
balance = balance + (balance * rate/12) - monthly.payment
interest.paid[i] <- (balance * rate/12)
principal.paid[i] <- monthly.payment - (balance * rate/12)
rem.balance <- balance[i]
i <- i + 1
df <- data.frame(rem.balance, principal.paid, interest.paid)
return(df)
}
}
df <- debt.amort(30000, .07, 1000)
View(df)
debt.amort <- function (principal, rate, monthly.payment) {
i <- 1
balance <- principal
rem.balance <- c()
principal.paid <- c()
interest.paid <- c()
while (balance > 0) {
balance <- balance + (balance * rate/12) - monthly.payment
interest.paid[i] <- (balance * rate/12)
principal.paid[i] <- monthly.payment - (balance * rate/12)
rem.balance <- balance[i]
i <- i + 1
df <- data.frame(rem.balance, principal.paid, interest.paid)
return(df)
}
}
df <- debt.amort(30000, .07, 1000)
debt.amort <- function (principal, rate, monthly.payment) {
i <- 1
balance <- principal
rem.balance <- c()
principal.paid <- c()
interest.paid <- c()
while (balance > 0) {
balance <- balance + (balance * rate/12) - monthly.payment
interest.paid[i] <- (balance * rate/12)
principal.paid[i] <- monthly.payment - (balance * rate/12)
rem.balance <- balance[i]
i <- i + 1
}
df <- data.frame(rem.balance, principal.paid, interest.paid)
return(df)
}
df <- debt.amort(30000, .07, 1000)
View(df)
debt.amort <- function (principal, rate, monthly.payment) {
i <- 1
balance <- principal
rem.balance <- c()
principal.paid <- c()
interest.paid <- c()
while (balance > 0) {
balance <- balance + (balance * rate/12) - monthly.payment
interest.paid[i] <- (balance * rate/12)
principal.paid[i] <- monthly.payment - (balance * rate/12)
rem.balance[i] <- balance
i <- i + 1
}
df <- data.frame(rem.balance, principal.paid, interest.paid)
return(df)
}
df <- debt.amort(30000, .07, 1000)
View(df)
debt.amort <- function (principal, rate, monthly.payment) {
i <- 1
balance <- principal
rem.balance <- c()
principal.paid <- c()
interest.paid <- c()
while (balance > 0) {
balance <- balance + (balance * rate/12) - monthly.payment
interest.paid[i] <- (balance * rate/12)
principal.paid[i] <- monthly.payment - (balance * rate/12)
rem.balance[i] <- balance
i <- i + 1
}
df <- data.frame(rem.balance, principal.paid, interest.paid)
df[nrow(df),] <- c(0, principal - principal.paid[nrow(df)], 0)
return(df)
}
df <- debt.amort(30000, .07, 1000)
View(df)
debt.amort <- function (principal, rate, monthly.payment) {
i <- 1
balance <- principal
rem.balance <- c()
principal.paid <- c()
interest.paid <- c()
while (balance > 0) {
balance <- balance + (balance * rate/12) - monthly.payment
interest.paid[i] <- (balance * rate/12)
principal.paid[i] <- monthly.payment - (balance * rate/12)
rem.balance[i] <- balance
i <- i + 1
}
df <- data.frame(rem.balance, principal.paid, interest.paid)
df[nrow(df),] <- c(0, principal - rem.balance[nrow(df - 1)], 0)
return(df)
}
df <- debt.amort(30000, .07, 1000)
View(df)
debt.amort <- function (principal, rate, monthly.payment) {
i <- 1
balance <- principal
rem.balance <- c()
principal.paid <- c()
interest.paid <- c()
while (balance > 0) {
balance <- balance + (balance * rate/12) - monthly.payment
interest.paid[i] <- (balance * rate/12)
principal.paid[i] <- monthly.payment - (balance * rate/12)
rem.balance[i] <- balance
i <- i + 1
}
df <- data.frame(rem.balance, principal.paid, interest.paid)
df[nrow(df),] <- c(0,  rem.balance[nrow(df - 1)], 0)
return(df)
}
df <- debt.amort(30000, .07, 1000)
View(df)
df[nrow(df),] <- c(0,  rem.balance[nrow(df - 1)], 0)
debt.amort <- function (principal, rate, monthly.payment) {
i <- 1
balance <- principal
rem.balance <- c()
principal.paid <- c()
interest.paid <- c()
while (balance > 0) {
balance <- balance + (balance * rate/12) - monthly.payment
interest.paid[i] <- (balance * rate/12)
principal.paid[i] <- monthly.payment - (balance * rate/12)
rem.balance[i] <- balance
i <- i + 1
}
df <- data.frame(rem.balance, principal.paid, interest.paid)
df[nrow(df),] <- c(0,  df[nrow(df) - 1, "rem.balance"], 0)
return(df)
}
df <- debt.amort(30000, .07, 1000)
View(df)
debt.amort <- function (principal, rate, monthly.payment) {
i <- 1
balance <- principal
rem.balance <- c()
principal.paid <- c()
interest.paid <- c()
while (balance > 0) {
balance <- balance + (balance * rate/12) - monthly.payment
interest.paid[i] <- (balance * rate/12)
principal.paid[i] <- monthly.payment - (balance * rate/12)
rem.balance[i] <- balance
i <- i + 1
}
df <- data.frame(rem.balance, principal.paid, interest.paid)
df[nrow(df),] <- c(0,  df[nrow(df) - 1, "rem.balance"] +  (df[nrow(df) - 1, "rem.balance"] * rate/12), (df[nrow(df) - 1, "rem.balance"] * rate/12))
return(df)
}
df <- debt.amort(30000, .07, 1000)
View(df)
debt.amort <- function (principal, rate, monthly.payment) {
i <- 1
balance <- principal
rem.balance <- c()
principal.paid <- c()
interest.paid <- c()
while (balance > 0) {
interest.paid[i] <- (balance * rate/12)
balance <- balance + (balance * rate/12) - monthly.payment
principal.paid[i] <- monthly.payment - (balance * rate/12)
rem.balance[i] <- balance
i <- i + 1
}
df <- data.frame(rem.balance, principal.paid, interest.paid)
df[nrow(df),] <- c(0,  df[nrow(df) - 1, "rem.balance"] +  (df[nrow(df) - 1, "rem.balance"] * rate/12), (df[nrow(df) - 1, "rem.balance"] * rate/12))
return(df)
}
df <- debt.amort(30000, .07, 1000)
View(df)
df <- debt.amort(30000, .07, 1000)
View(df)
amort.sched <- function (principal, rate, monthly.payment) {
i <- 1
balance <- principal
rem.balance <- c()
principal.paid <- c()
interest.paid <- c()
cumulative.principal <- c()
cumulative.interest <- c()
while (balance > 0) {
interest.paid[i] <- (balance * rate/12)
balance <- balance + (balance * rate/12) - monthly.payment
principal.paid[i] <- monthly.payment - (balance * rate/12)
rem.balance[i] <- balance
i <- i + 1
cumulative.principal[i] <- sum(principal.paid)
cumulative.interest[i] <- sum(interest.paid)
}
df <- data.frame(rem.balance, principal.paid, interest.paid, cumulative.principal, cumulative.interest)
df[nrow(df),] <- c(0,  df[nrow(df) - 1, "rem.balance"] +  (df[nrow(df) - 1, "rem.balance"] * rate/12), (df[nrow(df) - 1, "rem.balance"] * rate/12))
return(df)
}
df <- amort.sched(30000, .07, 1000)
amort.sched <- function (principal, rate, monthly.payment) {
i <- 1
balance <- principal
rem.balance <- c()
principal.paid <- c()
interest.paid <- c()
cumulative.principal <- c()
cumulative.interest <- c()
while (balance > 0) {
interest.paid[i] <- (balance * rate/12)
balance <- balance + (balance * rate/12) - monthly.payment
principal.paid[i] <- monthly.payment - (balance * rate/12)
rem.balance[i] <- balance
cumulative.principal[i] <- sum(principal.paid)
cumulative.interest[i] <- sum(interest.paid)
i <- i + 1
}
df <- data.frame(rem.balance, principal.paid, interest.paid, cumulative.principal, cumulative.interest)
df[nrow(df),] <- c(0,  df[nrow(df) - 1, "rem.balance"] +  (df[nrow(df) - 1, "rem.balance"] * rate/12), (df[nrow(df) - 1, "rem.balance"] * rate/12))
return(df)
}
df <- amort.sched(30000, .07, 1000)
amort.sched <- function (principal, rate, monthly.payment) {
i <- 1
balance <- principal
rem.balance <- c()
principal.paid <- c()
interest.paid <- c()
cumulative.principal <- c()
cumulative.interest <- c()
while (balance > 0) {
interest.paid[i] <- (balance * rate/12)
balance <- balance + (balance * rate/12) - monthly.payment
principal.paid[i] <- monthly.payment - (balance * rate/12)
rem.balance[i] <- balance
cumulative.principal[i] <- sum(principal.paid)
cumulative.interest[i] <- sum(interest.paid)
i <- i + 1
}
df <- data.frame(rem.balance, principal.paid, interest.paid, cumulative.principal, cumulative.interest)
df[nrow(df),1:3] <- c(0,  df[nrow(df) - 1, "rem.balance"] +  (df[nrow(df) - 1, "rem.balance"] * rate/12), (df[nrow(df) - 1, "rem.balance"] * rate/12))
return(df)
}
df <- amort.sched(30000, .07, 1000)
View(df)
devtools :: document()
library(roxygen2)
document()
devtools :: document()
install.packages("root")
install.packages('root2')
devtools :: document()
devtools::install_github(repo = "FantasyFootballAnalytics/ffanalytics", build_vignettes = TRUE)
devtools::install_github(repo = "FantasyFootballAnalytics/ffanalytics", build_vignettes = TRUE)
devtools::install_github(repo = "FantasyFootballAnalytics/ffanalytics", build_vignettes = FALSE)
devtools::install_github(repo = "FantasyFootballAnalytics/ffanalytics", build_vignettes = FALSE)
install.packages("backports")
install.packages("backports")
devtools::install_github(repo = "FantasyFootballAnalytics/ffanalytics", build_vignettes = FALSE)
library("ffanalytics")
View(player_table)
?ffanalytics
??ffanalytics
my_scrape <- scrape_data(src = c("CBS", "ESPN", "Yahoo"),
pos = c("QB", "RB", "WR", "TE", "DST"),
season = 2019, week = 0)
my_projections <- projections_table(my_scrape)
View(my_projections)
View(my_scrape)
View(player_table)
View(my_scrape)
View(my_projections)
player_names <- player_table %>% select(id, last_name, first_name, position)
my_projections <- merge(my_projections, player_names)
View(my_projections)
library("ffanalytics")
my_scrape <- scrape_data(src = c("CBS", "ESPN", "Yahoo"),
pos = c("QB", "RB", "WR", "TE", "DST"),
season = 2019, week = 0)
my_projections <- projections_table(my_scrape)
player_names <- player_table %>% select(id, last_name, first_name, position) %>% rename(pos = position)
my_projections <- merge(my_projections, player_names)
player_names <- player_table %>% select(id, last_name, first_name, position) %>% rename(pos = position)
library("ffanalytics")
player_table
?detach()
?detach(package:ffanalytics)
detach(package:ffanalytics)
library("ffanalytics")
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
setwd(getSrcDirectory()[1])
setwd(getSrcDirectory()[1])
?getSrcDirector
?getSrcDirectory
script.dir <- dirname(sys.frame(1)$ofile)setwd(getSrcDirectory()[1])
script.dir <- dirname(sys.frame(1)$ofile)
script.dir <- getSrcDirectory(function(x) {x})
dirname(parent.frame(2)$ofile)
library(shiny); runApp('active_projects/fantasy_football_algorithm/draft_dashboard/App1.2.R')
runApp('active_projects/fantasy_football_algorithm/draft_dashboard/App1.2.R')
runApp('active_projects/fantasy_football_algorithm/draft_dashboard/App1.2.R')
runApp('active_projects/fantasy_football_algorithm/draft_dashboard/App1.2.R')
runApp('active_projects/fantasy_football_algorithm/draft_dashboard/App1.2.R')
runApp('active_projects/fantasy_football_algorithm/draft_dashboard/App1.2.R')
runApp('active_projects/fantasy_football_algorithm/draft_dashboard/App1.2.R')
library(ffanalytics)
cbs_draft()
cbs_draft
cbs_draft()
espn_draft()
read_html(espn_draft)
read_html(espn_draft())
cbs_draft()
cvs_draft()
cvs_draft
cbs_draft
draft_url <- "https://www.cbssports.com/fantasy/football/draft/averages?&print_rows=9999"
read_html(draft_url)
read_html(draft_url)
draft_pge <- read_html(draft_url)
View(draft_pge)
draft_pge %>% html_node("table.data tr.title") %>% xml_remove()
draft_pge %>% html_node("table.data tr.footer") %>% xml_remove()
cbs_ids <- draft_pge %>% html_nodes("table.data tr td a") %>%
html_attr("href") %>% str_extract_all(pattern = "[0-9]{3,}") %>%
unlist(use.names = FALSE)
cbs_ids <- draft_pge %>% html_nodes("table.data tr td a") %>%
html_attr("href") %>% str_extract_all(pattern = "[0-9]{3,}") %>%
unlist(use.names = FALSE)
draft_tbl <- draft_pge %>% html_node("table.data") %>% html_table(header = TRUE) %>%
extract(Player, c("Player", "Pos", "Team"), "(.+)\\,\\s(.+)\\,\\s(.+)") %>%
extract("HI/LO", c("Best", "Worst"), "([0-9]+)/([0-9]+)") %>%
rename(adp = "Avg Pos") %>% add_column(cbs_id = cbs_ids,
.before = 1)
View(draft_pge)
espn_draft(
)
library(ffanalytics)
cbs_draft()
setwd("C:/Users/montg/Documents/active_projects/fantasy_football/expert_ranks")
library(dplyr)
file_names <- dir()
df <- do.call(rbind,lapply(file_names,read.csv))
df$Overall <- gsub("\\s*\\([^\\)]+\\)","",as.character(df$Overall))
df$Overall <- gsub(x = df$Overall, pattern = paste(stopwords, collapse = "|"), replacement = "")
df$Overall <- sapply(df$Overall, toupper)
player_list <- unique(df$Overall)
stopwords <- c(" Jr.", " II", " III", " IV")
player_dist <- list()
best <- c()
worst<- c()
a <- 1
for (i in player_list){
best[a] <- df %>% filter (Overall == i) %>% select(Best)
worst[a] <- df %>% filter (Overall == i) %>% select(Worst)
player_dist[[i]] <- c(worst[[a]], best[[a]])
a <- a + 1
}
write.csv(player_list, "../player_list.csv")
save(player_dist, file = "../player_distributions.RData")
setwd("C:/Users/montg/Documents/active_projects/fantasy_football_algorithm/expert_ranks")
library(dplyr)
file_names <- dir()
df <- do.call(rbind,lapply(file_names,read.csv))
df$Overall <- gsub("\\s*\\([^\\)]+\\)","",as.character(df$Overall))
df$Overall <- gsub(x = df$Overall, pattern = paste(stopwords, collapse = "|"), replacement = "")
df$Overall <- sapply(df$Overall, toupper)
player_list <- unique(df$Overall)
stopwords <- c(" Jr.", " II", " III", " IV")
player_dist <- list()
best <- c()
worst<- c()
a <- 1
for (i in player_list){
best[a] <- df %>% filter (Overall == i) %>% select(Best)
worst[a] <- df %>% filter (Overall == i) %>% select(Worst)
player_dist[[i]] <- c(worst[[a]], best[[a]])
a <- a + 1
}
write.csv(player_list, "../player_list.csv")
save(player_dist, file = "../player_distributions.RData")
setwd("C:/Users/montg/Documents/active_projects/fantasy_football_algorithm/expert_ranks")
library(dplyr)
file_names <- dir()
df <- do.call(rbind,lapply(file_names,read.csv))
df$Overall <- gsub("\\s*\\([^\\)]+\\)","",as.character(df$Overall))
df$Overall <- gsub(x = df$Overall, pattern = paste(stopwords, collapse = "|"), replacement = "")
df$Overall <- sapply(df$Overall, toupper)
player_list <- unique(df$Overall)
stopwords <- c(" Jr.", " II", " III", " IV")
player_dist <- list()
best <- c()
worst<- c()
a <- 1
for (i in player_list){
best[a] <- df %>% filter (Overall == i) %>% select(Best)
worst[a] <- df %>% filter (Overall == i) %>% select(Worst)
player_dist[[i]] <- c(worst[[a]], best[[a]])
a <- a + 1
}
write.csv(player_list, "../player_list.csv")
save(player_dist, file = "../player_distributions.RData")
library("ffanalytics")
setwd("C:/Users/montg/Documents/active_projects/fantasy_football")
my_scrape <- scrape_data(
pos = c("QB", "RB", "WR", "TE", "DST"),
src = c("CBS", "ESPN", "FantasyPros", "Yahoo", "NFL"),
season = 2019, week = 0)
my_projections <- projections_table(my_scrape)
player_names <- player_table %>% select(id, last_name, first_name, position) %>% rename(pos = position)
my_projections <- merge(my_projections, player_names)
my_projections <- my_projections %>% select(last_name,first_name, pos, id, points, rank, pos_rank, sd_pts, avg_type ) %>%
filter (avg_type == "robust")
stopwords <- c(" Jr.", " II", " III", " IV")
my_projections$name <- paste(my_projections$first_name, my_projections$last_name, sep = " ")
my_projections$name <- ifelse(my_projections$pos == "DST", my_projections$first_name, my_projections$name)
my_projections$name <- gsub(x = my_projections$name, pattern = paste(stopwords, collapse = "|"), replacement = "")
my_projections$name <- sapply(my_projections$name, toupper)
my_projections$name <- ifelse(my_projections$name == "MITCHELL TRUBISKY", "MITCH TRUBISKY", my_projections$name)
write.csv(my_projections, "projections.csv")
library("ffanalytics")
setwd("C:/Users/montg/Documents/active_projects/fantasy_football")
my_scrape <- scrape_data(
pos = c("QB", "RB", "WR", "TE", "DST"),
src = c("CBS", "ESPN", "FantasyPros", "Yahoo", "NFL"),
season = 2019, week = 0)
my_projections <- projections_table(my_scrape)
View(my_projections)
player_names <- player_table %>% select(id, last_name, first_name, position) %>% rename(pos = position)
library("ffanalytics", lib.loc="~/R/win-library/3.5")
detach("package:ffanalytics", unload=TRUE)
library("ffanalytics", lib.loc="~/R/win-library/3.5")
library("ffanalytics")
setwd("C:/Users/montg/Documents/active_projects/fantasy_football")
my_scrape <- scrape_data(
pos = c("QB", "RB", "WR", "TE", "DST"),
src = c("CBS", "ESPN", "FantasyPros", "Yahoo", "NFL"),
season = 2019, week = 0)
my_projections <- projections_table(my_scrape)
player_names <- player_table %>% select(id, last_name, first_name, position) %>% rename(pos = position)
my_projections <- merge(my_projections, player_names)
my_projections <- my_projections %>% select(last_name,first_name, pos, id, points, rank, pos_rank, sd_pts, avg_type ) %>%
filter (avg_type == "robust")
stopwords <- c(" Jr.", " II", " III", " IV")
my_projections$name <- paste(my_projections$first_name, my_projections$last_name, sep = " ")
my_projections$name <- ifelse(my_projections$pos == "DST", my_projections$first_name, my_projections$name)
my_projections$name <- gsub(x = my_projections$name, pattern = paste(stopwords, collapse = "|"), replacement = "")
my_projections$name <- sapply(my_projections$name, toupper)
my_projections$name <- ifelse(my_projections$name == "MITCHELL TRUBISKY", "MITCH TRUBISKY", my_projections$name)
write.csv(my_projections, "projections.csv")
library(shiny); runApp('draft_dashboard/App2.0.R')
library("ffanalytics")
setwd("C:/Users/montg/Documents/active_projects/fantasy_football_algorithm")
my_scrape <- scrape_data(
pos = c("QB", "RB", "WR", "TE", "DST"),
src = c("CBS", "ESPN", "FantasyPros", "Yahoo", "NFL"),
season = 2019, week = 0)
my_projections <- projections_table(my_scrape)
player_names <- player_table %>% select(id, last_name, first_name, position) %>% rename(pos = position)
my_projections <- merge(my_projections, player_names)
my_projections <- my_projections %>% select(last_name,first_name, pos, id, points, rank, pos_rank, sd_pts, avg_type ) %>%
filter (avg_type == "robust")
stopwords <- c(" Jr.", " II", " III", " IV")
my_projections$name <- paste(my_projections$first_name, my_projections$last_name, sep = " ")
my_projections$name <- ifelse(my_projections$pos == "DST", my_projections$first_name, my_projections$name)
my_projections$name <- gsub(x = my_projections$name, pattern = paste(stopwords, collapse = "|"), replacement = "")
my_projections$name <- sapply(my_projections$name, toupper)
my_projections$name <- ifelse(my_projections$name == "MITCHELL TRUBISKY", "MITCH TRUBISKY", my_projections$name)
write.csv(my_projections, "projections.csv")
runApp('draft_dashboard/App1.2.R')
runApp('draft_dashboard/App1.2.R')
devtools::install_github(repo = "FantasyFootballAnalytics/ffanalytics", build_vignettes = TRUE)
